name: Deploy to AWS EC2
permissions:
  contents: read

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          timeout: 15m
          command_timeout: 15m
          debug: true
          script: |
            set -euo pipefail
            echo "[INFO] Starting deploy on $(hostname)"
            TARGET_DIR="/home/${{ secrets.EC2_USER }}/mokin-recruit"

            # Setup NVM environment if available
            if [ -d "$HOME/.nvm" ]; then
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            fi

            # Prepare directory and fetch code
            mkdir -p "$TARGET_DIR"
            if [ -d "$TARGET_DIR/.git" ]; then
              cd "$TARGET_DIR"
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            else
              rm -rf "$TARGET_DIR"
              git clone https://github.com/${{ github.repository }}.git "$TARGET_DIR"
              cd "$TARGET_DIR"
            fi

            # Write production env from GitHub Secrets
            cat > .env.production << 'EOF'
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            NODE_ENV=production
            EOF

            # Check if dependencies need updating
            if [ -f package-lock.json.md5 ]; then
              OLD_MD5=$(cat package-lock.json.md5)
              NEW_MD5=$(md5sum package-lock.json | awk '{print $1}')
              if [ "$OLD_MD5" = "$NEW_MD5" ]; then
                echo "[INFO] Dependencies unchanged, skipping npm ci"
              else
                echo "[INFO] Dependencies changed, running npm ci..."
                npm ci --no-audit --no-fund --prefer-offline
                echo "$NEW_MD5" > package-lock.json.md5
              fi
            else
              echo "[INFO] First deployment, installing dependencies..."
              npm ci --no-audit --no-fund --prefer-offline
              md5sum package-lock.json | awk '{print $1}' > package-lock.json.md5
            fi

            echo "[INFO] Building Next.js application..."
            export NEXT_TELEMETRY_DISABLED=1
            NODE_OPTIONS='--max-old-space-size=4096' npm run build

            echo "[INFO] Build completed successfully"

            # Ensure pm2 and restart/start app
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi
            pm2 restart mokin-recruit || pm2 start npm --name mokin-recruit -- start
