name: Auto-fix Security Issues

on:
  schedule:
    # 毎日午前2時に実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fixes to apply'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - linting
          - formatting

permissions:
  contents: write
  pull-requests: write
  security-events: read

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get CodeQL alerts
        id: get-alerts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: alerts } = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: 'high,critical'
            });

            console.log(`Found ${alerts.length} high/critical alerts`);

            const securityAlerts = alerts.filter(alert =>
              alert.rule.security_severity_level === 'high' ||
              alert.rule.security_severity_level === 'critical'
            );

            core.setOutput('alerts', JSON.stringify(securityAlerts));
            core.setOutput('count', securityAlerts.length);

            return securityAlerts.length > 0;

      - name: Apply ESLint auto-fixes
        if: steps.get-alerts.outputs.count > 0 || github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'linting'
        run: |
          # ESLintで修正可能な問題を自動修正
          npm run lint -- --fix || true

          # TypeScript型エラーの簡単な修正
          npm run type-check || true

      - name: Apply Prettier formatting
        if: github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'formatting'
        run: |
          # Prettierでフォーマット
          npm run format || npx prettier --write "src/**/*.{ts,tsx,js,jsx}" || true

      - name: Apply security fixes
        if: steps.get-alerts.outputs.count > 0 || github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'security'
        run: |
          # セキュリティ関連の一般的な修正

          # 1. 不要なconsole.logの削除（本番環境用）
          find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | \
            xargs sed -i '/console\.log/d' || true

          # 2. 危険なinnerHTMLの使用をチェック
          find src -name "*.tsx" | \
            xargs grep -l "dangerouslySetInnerHTML" | \
            head -5 | \
            while read file; do
              echo "⚠️  Found dangerouslySetInnerHTML in $file - manual review required"
            done || true

          # 3. HTTPSの強制
          find src -name "*.ts" -o -name "*.tsx" | \
            xargs sed -i 's/http:\/\//https:\/\//g' || true

      - name: Check for dependency vulnerabilities
        run: |
          # npm auditで脆弱性をチェックし、可能なものは自動修正
          npm audit --audit-level=high || true
          npm audit fix --force || true

      - name: Check if changes were made
        id: git-check
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT
          echo "changed_files=$(git diff --name-only | wc -l)" >> $GITHUB_OUTPUT

      - name: Commit and create PR
        if: steps.git-check.outputs.changes == 'true'
        run: |
          # Gitの設定
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # ブランチ作成
          BRANCH_NAME="auto-fix/security-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME

          # 変更をコミット
          git add .
          git commit -m "🔒 Auto-fix security issues and code quality

          - Applied ESLint auto-fixes
          - Applied Prettier formatting
          - Fixed common security issues
          - Updated dependencies for security

          Generated by GitHub Actions
          Files changed: ${{ steps.git-check.outputs.changed_files }}"

          # プッシュ
          git push origin $BRANCH_NAME

          # プルリクエスト作成
          gh pr create \
            --title "🔒 Auto-fix: Security and code quality improvements" \
            --body "## 🤖 Automated Security Fixes

          This PR contains automated fixes for security issues and code quality improvements:

          ### Changes Made:
          - ✅ Applied ESLint auto-fixes
          - ✅ Applied Prettier formatting
          - ✅ Fixed common security issues
          - ✅ Updated dependencies for security

          ### Security Alerts Addressed:
          ${{ steps.get-alerts.outputs.count }} high/critical severity alerts found

          ### Files Changed:
          ${{ steps.git-check.outputs.changed_files }}

          **⚠️ Please review these changes carefully before merging.**

          ### Manual Review Required:
          - Check for any breaking changes
          - Verify that security fixes are appropriate
          - Test functionality in development environment

          ---
          *Generated automatically by GitHub Actions*" \
            --assignee "${{ github.actor }}" \
            --label "security,automated,needs-review"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## 🔍 Auto-fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Security alerts found**: ${{ steps.get-alerts.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files changed**: ${{ steps.git-check.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes made**: ${{ steps.git-check.outputs.changes == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.git-check.outputs.changes }}" == "true" ]; then
            echo "✅ Created pull request with automated fixes" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes needed" >> $GITHUB_STEP_SUMMARY
          fi