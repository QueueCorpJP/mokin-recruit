'use client';

import React, { useState } from 'react';
import { CandidateDetailData } from '../page';
import { useRouter } from 'next/navigation';
import { AdminButton } from '@/components/admin/ui/AdminButton';
import {
  GENDER_OPTIONS,
  INCOME_RANGES,
  PREFECTURES,
  generateDayOptions,
  generateMonthOptions,
  generateYearOptions,
} from '@/constants/profile';
import {
  JOB_CHANGE_TIMING_OPTIONS,
  CURRENT_ACTIVITY_STATUS_OPTIONS,
  PROGRESS_STATUS_OPTIONS,
  DECLINE_REASON_OPTIONS,
} from '@/constants/career-status';
import IndustrySelectModal from '@/components/career-status/IndustrySelectModal';
import JobTypeSelectModal from '@/components/career-status/JobTypeSelectModal';
import { CompanyNameInput } from '@/components/ui/CompanyNameInput';

interface Props {
  candidate: CandidateDetailData;
}

export default function CandidateEditClient({ candidate }: Props) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [modalState, setModalState] = useState<{
    isOpen: boolean;
    targetType: 'industry' | 'jobtype' | null;
    targetIndex: number | null;
  }>({ isOpen: false, targetType: null, targetIndex: null });
  const [skillInput, setSkillInput] = useState('');

  // Initialize form data with existing candidate data
  const [formData, setFormData] = useState({
    // Basic info
    email: candidate.email || '',
    lastName: candidate.last_name || '',
    firstName: candidate.first_name || '',
    lastNameKana: candidate.last_name_kana || '',
    firstNameKana: candidate.first_name_kana || '',
    gender: candidate.gender || 'unspecified',
    birthYear: candidate.birth_date ? new Date(candidate.birth_date).getFullYear().toString() : '',
    birthMonth: candidate.birth_date ? (new Date(candidate.birth_date).getMonth() + 1).toString() : '',
    birthDay: candidate.birth_date ? new Date(candidate.birth_date).getDate().toString() : '',
    prefecture: candidate.prefecture || '',
    phoneNumber: candidate.phone_number || '',
    currentIncome: candidate.current_income || '',
    
    // Career status
    hasCareerChange: candidate.has_career_change || 'no',
    jobChangeTiming: candidate.job_change_timing || '',
    currentActivityStatus: candidate.current_activity_status || '',
    
    // Recent job
    recentJobCompanyName: candidate.recent_job_company_name || '',
    recentJobDepartmentPosition: candidate.recent_job_department_position || '',
    recentJobStartYear: candidate.recent_job_start_year || '',
    recentJobStartMonth: candidate.recent_job_start_month || '',
    recentJobEndYear: candidate.recent_job_end_year || '',
    recentJobEndMonth: candidate.recent_job_end_month || '',
    recentJobIsCurrentlyWorking: candidate.recent_job_is_currently_working || false,
    recentJobDescription: candidate.recent_job_description || '',
    recentJobIndustries: candidate.recent_job_industries || [],
    recentJobTypes: candidate.recent_job_types || [],
    
    // Summary
    jobSummary: candidate.job_summary || '',
    selfPr: candidate.self_pr || '',
  });

  // 職歴データ
  const [workExperience, setWorkExperience] = useState(
    candidate.work_experience?.map(exp => ({
      industry_name: exp.industry_name,
      experience_years: exp.experience_years
    })) || [{ industry_name: '', experience_years: 0 }]
  );
  
  // 職種経験データ
  const [jobTypeExperience, setJobTypeExperience] = useState(
    candidate.job_type_experience?.map(exp => ({
      job_type_name: exp.job_type_name,
      experience_years: exp.experience_years
    })) || [{ job_type_name: '', experience_years: 0 }]
  );
  
  // 学歴データ
  const [education, setEducation] = useState(
    candidate.education && candidate.education.length > 0 ? candidate.education[0] : {
      final_education: '',
      school_name: '',
      department: '',
      graduation_year: null,
      graduation_month: null,
    }
  );
  
  // スキルデータ
  const [skills, setSkills] = useState(
    candidate.skills && candidate.skills.length > 0 ? {
      english_level: candidate.skills[0].english_level || '',
      other_languages: candidate.skills[0].other_languages || [{ language: '', level: '' }],
      skills_list: candidate.skills[0].skills_list || [],
      qualifications: candidate.skills[0].qualifications || '',
    } : {
      english_level: '',
      other_languages: [{ language: '', level: '' }],
      skills_list: [],
      qualifications: '',
    }
  );

  // 選考状況エントリーデータ
  type SelectionEntry = {
    id: string;
    isPrivate: boolean;
    industries: string[];
    companyName: string;
    department: string;
    progressStatus: string;
    declineReason?: string;
  };

  const [selectionEntries, setSelectionEntries] = useState<SelectionEntry[]>([
    {
      id: '1',
      isPrivate: false,
      industries: [],
      companyName: '',
      department: '',
      progressStatus: '',
      declineReason: '',
    },
  ]);

  const [selectedIndustriesMap, setSelectedIndustriesMap] = useState<{
    [key: number]: string[];
  }>({});

  // 選考状況エントリー関連のヘルパー関数
  const addSelectionEntry = () => {
    setSelectionEntries(prev => [
      ...prev,
      {
        id: `entry-${Date.now()}`,
        isPrivate: false,
        industries: [],
        companyName: '',
        department: '',
        progressStatus: '',
        declineReason: '',
      }
    ]);
  };

  const removeSelectionEntry = (index: number) => {
    setSelectionEntries(prev => prev.filter((_, i) => i !== index));
  };

  const updateSelectionEntry = (index: number, field: keyof SelectionEntry, value: any) => {
    setSelectionEntries(prev => prev.map((entry, i) => 
      i === index ? { ...entry, [field]: value } : entry
    ));
  };

  // 業界選択モーダルの処理
  const handleIndustryConfirm = (selectedIndustries: string[]) => {
    if (modalState.targetIndex !== null && modalState.targetIndex >= 0) {
      setSelectedIndustriesMap((prev) => ({
        ...prev,
        [modalState.targetIndex]: selectedIndustries,
      }));
      updateSelectionEntry(modalState.targetIndex, 'industries', selectedIndustries);
    }
    setModalState({ isOpen: false, targetType: null, targetIndex: null });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      // Create birth_date from components
      let birth_date = null;
      if (formData.birthYear && formData.birthMonth && formData.birthDay) {
        birth_date = `${formData.birthYear}-${formData.birthMonth.padStart(2, '0')}-${formData.birthDay.padStart(2, '0')}`;
      }

      const updateData = {
        email: formData.email,
        last_name: formData.lastName,
        first_name: formData.firstName,
        last_name_kana: formData.lastNameKana,
        first_name_kana: formData.firstNameKana,
        gender: formData.gender as 'male' | 'female' | 'unspecified',
        birth_date: birth_date || '',
        prefecture: formData.prefecture,
        phone_number: formData.phoneNumber,
        current_income: formData.currentIncome,
        has_career_change: formData.hasCareerChange,
        job_change_timing: formData.jobChangeTiming,
        current_activity_status: formData.currentActivityStatus,
        recent_job_company_name: formData.recentJobCompanyName,
        recent_job_department_position: formData.recentJobDepartmentPosition,
        recent_job_start_year: formData.recentJobStartYear,
        recent_job_start_month: formData.recentJobStartMonth,
        recent_job_end_year: formData.recentJobEndYear,
        recent_job_end_month: formData.recentJobEndMonth,
        recent_job_is_currently_working: formData.recentJobIsCurrentlyWorking,
        recent_job_description: formData.recentJobDescription,
        job_summary: formData.jobSummary,
        self_pr: formData.selfPr,
      };

      // Prepare data for confirmation page
      const confirmData = {
        updateData,
        education,
        workExperience,
        jobTypeExperience,
        skills,
        selectionEntries
      };

      // Navigate to confirmation page
      const dataParam = encodeURIComponent(JSON.stringify(confirmData));
      router.push(`/admin/candidate/${candidate.id}/edit/confirm?data=${dataParam}`);
    } catch (error) {
      console.error('Error preparing confirmation data:', error);
      alert('データの準備に失敗しました');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // 年の選択肢を生成（1973年から現在の年まで）
  const currentYear = new Date().getFullYear();
  const yearOptions = [];
  for (let year = currentYear; year >= 1973; year--) {
    yearOptions.push(year.toString());
  }

  // 月の選択肢を生成（1〜12月）
  const monthOptions = Array.from({ length: 12 }, (_, i) =>
    (i + 1).toString().padStart(2, '0'),
  );

  const handleJobTypeConfirm = (selectedJobTypes: string[]) => {
    if (modalState.targetIndex === -1) {
      // For job type experience
      const jobTypes = selectedJobTypes.map((jobType) => ({
        job_type_name: jobType,
        experience_years: 0
      }));
      setJobTypeExperience(jobTypes);
    }
    setModalState({ isOpen: false, targetType: null, targetIndex: null });
  };

  // Experience year options
  const experienceYearOptions = [
    '1年', '2年', '3年', '4年', '5年', '6年', '7年', '8年', '9年', '10年',
    '11年', '12年', '13年', '14年', '15年', '16年', '17年', '18年', '19年', '20年以上',
  ];

  // Education options
  const educationOptions = [
    '中学校卒業', '高等学校卒業', '高等専門学校卒業', '短期大学卒業', '専門学校卒業',
    '大学卒業（学士）', '大学院修士課程修了（修士）', '大学院博士課程修了（博士）',
    '海外大学卒業（学士）', '海外大学院修了（修士・博士含む）', 'その他',
  ];

  // Language options
  const ENGLISH_LEVELS = [
    { value: '', label: 'レベルを選択' },
    { value: 'native', label: 'ネイティブ' },
    { value: 'business', label: 'ビジネスレベル' },
    { value: 'conversation', label: '日常会話' },
    { value: 'basic', label: '基礎会話' },
    { value: 'none', label: 'なし' },
  ];

  const OTHER_LANGUAGES = [
    { value: '', label: '言語を選択' },
    { value: 'korean', label: '韓国語' },
    { value: 'chinese-simplified', label: '中国語（簡体字）' },
    { value: 'chinese-traditional', label: '中国語（繁体字）' },
    { value: 'spanish', label: 'スペイン語' },
    { value: 'french', label: 'フランス語' },
    { value: 'german', label: 'ドイツ語' },
    { value: 'italian', label: 'イタリア語' },
    // ... add more languages as needed
  ];

  const handleSkillInputKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && skillInput.trim()) {
      e.preventDefault();
      const newSkill = skillInput.trim();
      if (!skills.skills_list.includes(newSkill)) {
        setSkills(prev => ({
          ...prev,
          skills_list: [...prev.skills_list, newSkill]
        }));
      }
      setSkillInput('');
    }
  };

  const handleRemoveSkill = (skillToRemove: string) => {
    setSkills(prev => ({
      ...prev,
      skills_list: prev.skills_list.filter((skill) => skill !== skillToRemove)
    }));
  };

  const handleAddLanguage = () => {
    if (skills.other_languages.length < 5) {
      setSkills(prev => ({
        ...prev,
        other_languages: [...prev.other_languages, { language: '', level: '' }]
      }));
    }
  };

  const handleRemoveLanguage = (index: number) => {
    setSkills(prev => ({
      ...prev,
      other_languages: prev.other_languages.filter((_, i) => i !== index)
    }));
  };

  const handleLanguageChange = (index: number, field: 'language' | 'level', value: string) => {
    setSkills(prev => ({
      ...prev,
      other_languages: prev.other_languages.map((lang, i) => 
        i === index ? { ...lang, [field]: value } : lang
      )
    }));
  };

  return (
    <div>
      <div className="min-h-screen">
        <div className="p-6 mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            候補者情報編集
          </h1>
          <p className="text-gray-600">
            ユーザーID: {candidate.id}
          </p>
        </div>

        <div className="p-8">
          {/* 候補者分析 */}
          <section className="mb-12">
            <h2 className="text-xl font-bold text-gray-800 mb-4 pb-2 border-b-2 border-gray-300">
              候補者分析
            </h2>
            <div className="bg-white relative rounded-[4px] w-full">
              <div className="content-stretch flex flex-col items-start justify-start overflow-clip relative w-full">
                {/* ヘッダー行 */}
                <div className="bg-[rgba(255,255,255,0)] content-stretch flex items-start justify-start overflow-clip relative shrink-0 w-full">
                  <div className="basis-0 bg-[rgba(0,0,0,0.06)] content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 font-semibold grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">&nbsp;</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-[rgba(0,0,0,0.06)] content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 font-semibold grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">スカウト受信数</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-[rgba(0,0,0,0.06)] content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 font-semibold grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">開封数（開封率）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-[rgba(0,0,0,0.06)] content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 font-semibold grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">返信数（返信率）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-[rgba(0,0,0,0.06)] content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 font-semibold grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">応募数（応募率）</p>
                      </div>
                    </div>
                  </div>
                </div>
                {/* データ行 */}
                <div className="bg-[rgba(255,255,255,0)] content-stretch flex items-start justify-start overflow-clip relative shrink-0 w-full">
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">現在月</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="bg-[rgba(255,255,255,0)] content-stretch flex items-start justify-start overflow-clip relative shrink-0 w-full">
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">累計</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                  <div className="basis-0 bg-white content-stretch flex flex-col grow items-start justify-start min-h-px min-w-px relative self-stretch shrink-0">
                    <div aria-hidden="true" className="absolute border-[#b9b9b9] border-[1px_0px_0px_1px] border-solid inset-0 pointer-events-none" />
                    <div className="box-border content-stretch flex items-start justify-start overflow-clip px-3 py-2.5 relative shrink-0 w-full">
                      <div className="basis-0 grow leading-[0] min-h-px min-w-px not-italic relative shrink-0 text-[12px] text-black">
                        <p className="leading-[1.3]">0（0%）</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
          
          <form onSubmit={handleSubmit}>
            {/* メールアドレス - Signup structure doesn't have this as separate section, but keeping for admin */}
            <div className="flex flex-row gap-4 items-start w-fit mx-auto mb-8">
              <div className="pt-[11px] min-w-[130px] text-right">
                <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                  メールアドレス
                </label>
              </div>
              <div className="w-[400px]">
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                  placeholder="メールアドレスを入力"
                />
              </div>
            </div>

            {/* 基本情報 - Profile signup structure */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              {/* Name Fields */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    氏名
                  </label>
                </div>
                <div className="flex flex-col gap-2 w-[400px]">
                  <div className="flex flex-wrap gap-2">
                    <div className="flex-1 min-w-[120px]">
                      <input
                        type="text"
                        placeholder="姓"
                        autoComplete="off"
                        value={formData.lastName}
                        onChange={(e) => handleInputChange('lastName', e.target.value)}
                        className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                      />
                    </div>
                    <div className="flex-1 min-w-[120px]">
                      <input
                        type="text"
                        placeholder="名"
                        autoComplete="off"
                        value={formData.firstName}
                        onChange={(e) => handleInputChange('firstName', e.target.value)}
                        className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                      />
                    </div>
                  </div>
                  <p className="text-[#999999] text-[14px] font-medium tracking-[1.4px]">
                    ※登録後の変更は不可となっております。
                  </p>
                </div>
              </div>

              {/* Furigana Fields */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    フリガナ
                  </label>
                </div>
                <div className="flex flex-col gap-2 w-[400px]">
                  <div className="flex flex-wrap gap-2">
                    <div className="flex-1 min-w-[120px]">
                      <input
                        type="text"
                        placeholder="セイ"
                        autoComplete="off"
                        value={formData.lastNameKana}
                        onChange={(e) => handleInputChange('lastNameKana', e.target.value)}
                        className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                      />
                    </div>
                    <div className="flex-1 min-w-[120px]">
                      <input
                        type="text"
                        placeholder="メイ"
                        autoComplete="off"
                        value={formData.firstNameKana}
                        onChange={(e) => handleInputChange('firstNameKana', e.target.value)}
                        className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Gender Field */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    性別
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={formData.gender}
                      onChange={(e) => handleInputChange('gender', e.target.value)}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      {GENDER_OPTIONS.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              {/* Birth Date */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    生年月日
                  </label>
                </div>
                <div className="w-[400px] flex gap-2">
                  <div className="relative">
                    <select
                      value={formData.birthYear}
                      onChange={(e) => handleInputChange('birthYear', e.target.value)}
                      className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      {generateYearOptions().map((yearOption) => (
                        <option key={yearOption.value} value={yearOption.value}>
                          {yearOption.label}{yearOption.value ? '年' : ''}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                  <div className="relative">
                    <select
                      value={formData.birthMonth}
                      onChange={(e) => handleInputChange('birthMonth', e.target.value)}
                      className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      {generateMonthOptions().map((monthOption) => (
                        <option key={monthOption.value} value={monthOption.value}>
                          {monthOption.label}{monthOption.value ? '月' : ''}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                  <div className="relative">
                    <select
                      value={formData.birthDay}
                      onChange={(e) => handleInputChange('birthDay', e.target.value)}
                      className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      {generateDayOptions(formData.birthYear, formData.birthMonth).map((dayOption) => (
                        <option key={dayOption.value} value={dayOption.value}>
                          {dayOption.label}{dayOption.value ? '日' : ''}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              {/* Prefecture Field */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    現在の住まい
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={formData.prefecture}
                      onChange={(e) => handleInputChange('prefecture', e.target.value)}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      <option value="">選択してください</option>
                      {PREFECTURES.map((prefecture) => (
                        <option key={prefecture.value} value={prefecture.value}>
                          {prefecture.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              {/* Phone Number */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    電話番号
                  </label>
                </div>
                <div className="w-[400px]">
                  <input
                    type="tel"
                    value={formData.phoneNumber}
                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                    placeholder="ハイフンなしで入力"
                  />
                </div>
              </div>

              {/* Current Income */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    現在の年収
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={formData.currentIncome}
                      onChange={(e) => handleInputChange('currentIncome', e.target.value)}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      <option value="">選択してください</option>
                      {INCOME_RANGES.map((income) => (
                        <option key={income.value} value={income.value}>
                          {income.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Divider - 転職経験 */}
            <div className="flex flex-row w-full h-[29px] items-center justify-center gap-6 mb-8">
              <div className="flex-1 h-px relative">
                <div className="absolute inset-[-1px_-0.3%]">
                  <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                    <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                  </svg>
                </div>
              </div>
              <span className="text-[#323232] text-[18px] font-bold tracking-[1.8px] text-nowrap">
                転職経験
              </span>
              <div className="flex-1 h-px relative">
                <div className="absolute inset-[-1px_-0.3%]">
                  <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                    <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                  </svg>
                </div>
              </div>
            </div>

            {/* Career Change Experience */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              <div className="flex flex-row gap-4 items-start w-fit mx-auto mb-4">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    転職経験
                  </label>
                </div>
                <div className="flex flex-col gap-2 w-[400px]">
                  <div className="flex flex-row gap-2">
                    <button
                      type="button"
                      onClick={() => handleInputChange('hasCareerChange', 'yes')}
                      className={`flex-1 px-[11px] py-[11px] border rounded-[5px] text-[16px] font-bold tracking-[1.6px] transition-colors ${
                        formData.hasCareerChange === 'yes'
                          ? 'bg-[#0f9058] border-[#0f9058] text-white'
                          : 'bg-white border-[#999999] text-[#999999] hover:border-[#0f9058]'
                      }`}
                    >
                      あり
                    </button>
                    <button
                      type="button"
                      onClick={() => handleInputChange('hasCareerChange', 'no')}
                      className={`flex-1 px-[11px] py-[11px] border rounded-[5px] text-[16px] font-bold tracking-[1.6px] transition-colors ${
                        formData.hasCareerChange === 'no'
                          ? 'bg-[#0f9058] border-[#0f9058] text-white'
                          : 'bg-white border-[#999999] text-[#999999] hover:border-[#0f9058]'
                      }`}
                    >
                      なし
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Divider - 転職活動状況 */}
            <div className="flex flex-row w-full h-[29px] items-center justify-center gap-6 mb-8">
              <div className="flex-1 h-px relative">
                <div className="absolute inset-[-1px_-0.3%]">
                  <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                    <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                  </svg>
                </div>
              </div>
              <span className="text-[#323232] text-[18px] font-bold tracking-[1.8px] text-nowrap">
                転職活動状況
              </span>
              <div className="flex-1 h-px relative">
                <div className="absolute inset-[-1px_-0.3%]">
                  <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                    <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                  </svg>
                </div>
              </div>
            </div>

            <div className="flex flex-col gap-6 w-full items-end mb-8">
              {/* Job Change Timing */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto mt-4">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    転職希望時期
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={formData.jobChangeTiming}
                      onChange={(e) => handleInputChange('jobChangeTiming', e.target.value)}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] font-bold tracking-[1.6px] appearance-none cursor-pointer text-[#323232]"
                    >
                      <option value="">未選択</option>
                      {JOB_CHANGE_TIMING_OPTIONS.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              {/* Current Activity Status */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto mb-4">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    現在の活動状況
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={formData.currentActivityStatus}
                      onChange={(e) => handleInputChange('currentActivityStatus', e.target.value)}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] font-bold tracking-[1.6px] appearance-none cursor-pointer text-[#323232]"
                    >
                      <option value="">未選択</option>
                      {CURRENT_ACTIVITY_STATUS_OPTIONS.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Selection Status Section - matching career-status signup page exactly */}
            {(formData.currentActivityStatus !== 'not_active' && formData.currentActivityStatus !== 'info_gathering' && formData.currentActivityStatus !== '') && (
              <div>
                {/* Divider - 選考状況 */}
                <div className="flex flex-row w-full h-[29px] items-center justify-center gap-6">
                  <div className="flex-1 h-px relative">
                    <div className="absolute inset-[-1px_-0.3%]">
                      <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                        <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                      </svg>
                    </div>
                  </div>
                  <span className="text-[#323232] text-[18px] font-bold tracking-[1.8px] text-nowrap">
                    選考状況
                  </span>
                  <div className="flex-1 h-px relative">
                    <div className="absolute inset-[-1px_-0.3%]">
                      <svg width="100%" height="1" viewBox="0 0 100 1" preserveAspectRatio="none">
                        <line x1="0" y1="0" x2="100" y2="0" stroke="#dcdcdc" strokeWidth="1" />
                      </svg>
                    </div>
                  </div>
                </div>

                {/* Selection Status Entries */}
                <div className="flex flex-col gap-2 items-center w-[536px] mx-auto">
                  {selectionEntries.map((entry, index) => (
                    <div
                      key={entry.id}
                      className="bg-[#f9f9f9] rounded-[10px] p-10 w-full flex flex-col gap-6 items-end relative"
                    >
                      {index > 0 && (
                        <div
                          className="absolute top-6 right-6 w-4 h-4 cursor-pointer"
                          onClick={() => removeSelectionEntry(index)}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none">
                            <path d="M14.8927 0.276093C15.2603 -0.0914467 15.8562 -0.09139 16.2238 0.276093C16.5914 0.64366 16.5914 1.23958 16.2238 1.60715L9.83123 7.99875L16.2248 14.3923L16.258 14.4275C16.5917 14.7968 16.5805 15.3672 16.2248 15.7234C15.8688 16.0793 15.2984 16.091 14.9289 15.7575L14.8937 15.7234L8.50017 9.3298L2.10662 15.7243L2.07146 15.7575C1.70198 16.0914 1.13164 16.0804 0.775562 15.7243C0.419562 15.3682 0.408556 14.7979 0.742359 14.4284L0.775562 14.3933L7.16912 7.99875L0.775562 1.60617C0.408165 1.23862 0.408127 0.642643 0.775562 0.275116C1.14308 -0.092404 1.73904 -0.0923087 2.10662 0.275116L8.50017 6.66769L14.8927 0.276093Z" fill="#999999" />
                          </svg>
                        </div>
                      )}

                      {/* Public Range Checkbox */}
                      <div className="flex flex-row gap-4 items-start w-full">
                        <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-1 min-w-[130px] text-right">
                          公開範囲
                        </label>
                        <div className="flex flex-row gap-2 items-start w-[400px]">
                          <div
                            className="w-5 h-5 mt-1 cursor-pointer"
                            onClick={() => updateSelectionEntry(index, 'isPrivate', !entry.isPrivate)}
                          >
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M2.85714 0C1.28125 0 0 1.28125 0 2.85714V17.1429C0 18.7188 1.28125 20 2.85714 20H17.1429C18.7188 20 20 18.7188 20 17.1429V2.85714C20 1.28125 18.7188 0 17.1429 0H2.85714ZM15.0446 7.90179L9.33036 13.6161C8.91071 14.0357 8.23214 14.0357 7.81696 13.6161L4.95982 10.7589C4.54018 10.3393 4.54018 9.66071 4.95982 9.24554C5.37946 8.83036 6.05804 8.82589 6.47321 9.24554L8.57143 11.3438L13.5268 6.38393C13.9464 5.96429 14.625 5.96429 15.0402 6.38393C15.4554 6.80357 15.4598 7.48214 15.0402 7.89732L15.0446 7.90179Z" fill={entry.isPrivate ? '#0F9058' : '#DCDCDC'} />
                            </svg>
                          </div>
                          <div className="flex flex-col gap-1 flex-1">
                            <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                              企業名を非公開（業種・進捗のみ公開）
                            </span>
                            <p className="text-[#999999] text-[14px] font-medium tracking-[1.4px] leading-[1.6]">
                              企業に選考状況を伝えることで、<br />
                              スカウトの質やあなたへの興味度が高まりやすくなります。<br />
                              ※選考中の企業には自動で非公開になります。
                            </p>
                          </div>
                        </div>
                      </div>

                      {/* Industry Selection */}
                      <div className="flex flex-row gap-4 items-start w-full">
                        <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-[11px] min-w-[130px] text-right">
                          業種
                        </label>
                        <div className="flex flex-col gap-2 w-[400px]">
                          <button
                            type="button"
                            onClick={() => setModalState({ isOpen: true, targetType: 'industry', targetIndex: index })}
                            className="px-10 h-[50px] border border-[#999999] rounded-[32px] text-[#323232] text-[16px] font-bold tracking-[1.6px] bg-white w-fit"
                          >
                            業種を選択
                          </button>
                          <div className="flex flex-wrap gap-2">
                            {selectedIndustriesMap[index]?.map((industry) => (
                              <div key={industry} className="bg-[#d2f1da] px-6 py-2 rounded-[10px] flex items-center gap-2">
                                <span className="text-[#0f9058] text-[14px] font-bold tracking-[1.4px]">
                                  {industry}
                                </span>
                                <button
                                  type="button"
                                  onClick={() => {
                                    setSelectedIndustriesMap((prev) => ({
                                      ...prev,
                                      [index]: prev[index]?.filter((j) => j !== industry) || [],
                                    }));
                                    const newIndustries = selectedIndustriesMap[index]?.filter((j) => j !== industry) || [];
                                    updateSelectionEntry(index, 'industries', newIndustries);
                                  }}
                                >
                                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                                    <path d="M1 1L11 11M1 11L11 1" stroke="#0F9058" strokeWidth="1.5" strokeLinecap="round" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>

                      {/* Company Name */}
                      <div className="flex flex-row gap-4 items-start w-full">
                        <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-[11px] min-w-[130px] text-right">
                          企業名
                        </label>
                        <CompanyNameInput
                          value={entry.companyName}
                          onChange={(value) => updateSelectionEntry(index, 'companyName', value)}
                          placeholder="企業名を入力"
                          className="w-[400px] px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                        />
                      </div>

                      {/* Department */}
                      <div className="flex flex-row gap-4 items-start w-full">
                        <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-[11px] min-w-[130px] text-right">
                          部署名・役職名
                        </label>
                        <input
                          type="text"
                          placeholder="部署名・役職名を入力"
                          value={entry.department || ''}
                          onChange={(e) => updateSelectionEntry(index, 'department', e.target.value)}
                          className="w-[400px] px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                        />
                      </div>

                      {/* Progress Status */}
                      <div className="flex flex-row gap-4 items-start w-full">
                        <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-[11px] min-w-[130px] text-right">
                          進捗状況
                        </label>
                        <div className="w-[400px]">
                          <div className="relative">
                            <select
                              value={entry.progressStatus}
                              onChange={(e) => updateSelectionEntry(index, 'progressStatus', e.target.value)}
                              className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                            >
                              <option value="">未選択</option>
                              {PROGRESS_STATUS_OPTIONS.map((option) => (
                                <option key={option.value} value={option.value}>
                                  {option.label}
                                </option>
                              ))}
                            </select>
                            <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                                <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Decline Reason */}
                      {entry.progressStatus === '辞退' && (
                        <div className="flex flex-row gap-4 items-start w-full">
                          <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px] pt-[11px] min-w-[130px] text-right">
                            辞退理由
                          </label>
                          <div className="w-[400px]">
                            <div className="relative">
                              <select
                                value={entry.declineReason || ''}
                                onChange={(e) => updateSelectionEntry(index, 'declineReason', e.target.value)}
                                className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                              >
                                <option value="">未選択</option>
                                {DECLINE_REASON_OPTIONS.map((option) => (
                                  <option key={option.value} value={option.value}>
                                    {option.label}
                                  </option>
                                ))}
                              </select>
                              <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                                  <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                                  </svg>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={addSelectionEntry}
                    className="bg-white border border-[#0f9058] rounded-[32px] px-6 py-2.5 flex items-center gap-2"
                  >
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M8 1.5V14.5M1.5 8H14.5" stroke="#0f9058" strokeWidth="2" strokeLinecap="round" />
                    </svg>
                    <span className="text-[#0f9058] text-[14px] font-bold tracking-[1.4px]">
                      企業を追加
                    </span>
                  </button>
                </div>
              </div>
            )}

            {/* Recent Job Section - matching recent-job signup page exactly */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              {/* Company Name */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    企業名
                  </label>
                </div>
                <div className="w-[400px]">
                  <CompanyNameInput
                    value={formData.recentJobCompanyName}
                    onChange={(value) => handleInputChange('recentJobCompanyName', value)}
                    placeholder="企業名を入力"
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                  />
                </div>
              </div>

              {/* Department/Position */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    部署名・役職名
                  </label>
                </div>
                <div className="w-[400px]">
                  <input
                    type="text"
                    placeholder="部署名・役職名を入力"
                    value={formData.recentJobDepartmentPosition}
                    onChange={(e) => handleInputChange('recentJobDepartmentPosition', e.target.value)}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                  />
                </div>
              </div>

              {/* Start Date */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    開始年月
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="flex flex-wrap gap-2 items-center">
                    <div className="relative">
                      <select
                        value={formData.recentJobStartYear}
                        onChange={(e) => handleInputChange('recentJobStartYear', e.target.value)}
                        className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                      >
                        <option value="">未選択</option>
                        {yearOptions.map((year) => (
                          <option key={year} value={year}>
                            {year}
                          </option>
                        ))}
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                          <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                        </svg>
                      </div>
                    </div>
                    <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">年</span>
                    <div className="relative">
                      <select
                        value={formData.recentJobStartMonth}
                        onChange={(e) => handleInputChange('recentJobStartMonth', e.target.value)}
                        className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                      >
                        <option value="">未選択</option>
                        {monthOptions.map((month) => (
                          <option key={month} value={month}>
                            {month}
                          </option>
                        ))}
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                          <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                        </svg>
                      </div>
                    </div>
                    <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">月</span>
                  </div>
                </div>
              </div>

              {/* End Date - only show if not currently working */}
              {!formData.recentJobIsCurrentlyWorking && (
                <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                  <div className="pt-[11px] min-w-[130px] text-right">
                    <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                      終了年月
                    </label>
                  </div>
                  <div className="w-[400px]">
                    <div className="flex flex-col gap-2">
                      <div className="flex flex-wrap gap-2 items-center">
                        <div className="relative">
                          <select
                            value={formData.recentJobEndYear}
                            onChange={(e) => handleInputChange('recentJobEndYear', e.target.value)}
                            className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                          >
                            <option value="">未選択</option>
                            {yearOptions.filter(year => !formData.recentJobStartYear || parseInt(year) >= parseInt(formData.recentJobStartYear)).map((year) => (
                              <option key={year} value={year}>
                                {year}
                              </option>
                            ))}
                          </select>
                          <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                              <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                            </svg>
                          </div>
                        </div>
                        <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">年</span>
                        <div className="relative">
                          <select
                            value={formData.recentJobEndMonth}
                            onChange={(e) => handleInputChange('recentJobEndMonth', e.target.value)}
                            className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                          >
                            <option value="">未選択</option>
                            {monthOptions.map((month) => (
                              <option key={month} value={month}>
                                {month}
                              </option>
                            ))}
                          </select>
                          <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                              <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                            </svg>
                          </div>
                        </div>
                        <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">月</span>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Currently Working Checkbox */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]"></label>
                </div>
                <div className="w-[400px]">
                  <div className="flex flex-row gap-2 items-center">
                    <div
                      className="w-5 h-5 cursor-pointer"
                      onClick={() => handleInputChange('recentJobIsCurrentlyWorking', !formData.recentJobIsCurrentlyWorking)}
                    >
                      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                          d="M2.85714 0C1.28125 0 0 1.28125 0 2.85714V17.1429C0 18.7188 1.28125 20 2.85714 20H17.1429C18.7188 20 20 18.7188 20 17.1429V2.85714C20 1.28125 18.7188 0 17.1429 0H2.85714ZM15.0446 7.90179L9.33036 13.6161C8.91071 14.0357 8.23214 14.0357 7.81696 13.6161L4.95982 10.7589C4.54018 10.3393 4.54018 9.66071 4.95982 9.24554C5.37946 8.83036 6.05804 8.82589 6.47321 9.24554L8.57143 11.3438L13.5268 6.38393C13.9464 5.96429 14.625 5.96429 15.0402 6.38393C15.4554 6.80357 15.4598 7.48214 15.0402 7.89732L15.0446 7.90179Z"
                          fill={formData.recentJobIsCurrentlyWorking ? '#0F9058' : '#DCDCDC'}
                        />
                      </svg>
                    </div>
                    <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                      現在も在籍中
                    </span>
                  </div>
                </div>
              </div>

              {/* Industries */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    業種
                  </label>
                </div>
                <div className="flex flex-col gap-2 w-[400px]">
                  <button
                    type="button"
                    onClick={() => setModalState({ isOpen: true, targetType: 'industry', targetIndex: -1 })}
                    className="px-10 h-[50px] border border-[#999999] rounded-[32px] text-[#323232] text-[16px] font-bold tracking-[1.6px] bg-white w-fit"
                  >
                    業種を選択
                  </button>
                  <div className="flex flex-wrap gap-2">
                    {workExperience.map((exp, index) => (
                      <div key={index} className="bg-[#d2f1da] px-6 py-2 rounded-[10px] flex items-center gap-2">
                        <span className="text-[#0f9058] text-[14px] font-bold tracking-[1.4px]">
                          {exp.industry_name}
                        </span>
                        <button
                          type="button"
                          onClick={() => {
                            setWorkExperience(workExperience.filter((_, i) => i !== index));
                          }}
                        >
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <path d="M1 1L11 11M1 11L11 1" stroke="#0F9058" strokeWidth="1.5" strokeLinecap="round" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Job Types */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    職種
                  </label>
                </div>
                <div className="flex flex-col gap-2 w-[400px]">
                  <button
                    type="button"
                    onClick={() => setModalState({ isOpen: true, targetType: 'jobtype', targetIndex: -1 })}
                    className="px-10 h-[50px] border border-[#999999] rounded-[32px] text-[#323232] text-[16px] font-bold tracking-[1.6px] bg-white w-fit"
                  >
                    職種を選択
                  </button>
                  <div className="flex flex-wrap gap-2">
                    {jobTypeExperience.map((exp, index) => (
                      <div key={index} className="bg-[#d2f1da] px-6 py-2 rounded-[10px] flex items-center gap-2">
                        <span className="text-[#0f9058] text-[14px] font-bold tracking-[1.4px]">
                          {exp.job_type_name}
                        </span>
                        <button
                          type="button"
                          onClick={() => {
                            setJobTypeExperience(jobTypeExperience.filter((_, i) => i !== index));
                          }}
                        >
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <path d="M1 1L11 11M1 11L11 1" stroke="#0F9058" strokeWidth="1.5" strokeLinecap="round" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Job Description */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    職務内容
                  </label>
                </div>
                <div className="w-[400px]">
                  <textarea
                    value={formData.recentJobDescription}
                    onChange={(e) => handleInputChange('recentJobDescription', e.target.value)}
                    rows={4}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999] resize-none"
                    placeholder="職務内容を入力してください"
                  />
                </div>
              </div>
            </div>

            {/* Education Section - matching education signup page exactly */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    最終学歴
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={education.final_education || ''}
                      onChange={(e) => setEducation({ ...education, final_education: e.target.value })}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      <option value="">選択してください</option>
                      {educationOptions.map((option) => (
                        <option key={option} value={option}>
                          {option}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    学校名
                  </label>
                </div>
                <div className="w-[400px]">
                  <input
                    type="text"
                    value={education.school_name || ''}
                    onChange={(e) => setEducation({ ...education, school_name: e.target.value })}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                    placeholder="学校名を入力"
                  />
                </div>
              </div>

              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    学部・学科
                  </label>
                </div>
                <div className="w-[400px]">
                  <input
                    type="text"
                    value={education.department || ''}
                    onChange={(e) => setEducation({ ...education, department: e.target.value })}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                    placeholder="学部・学科を入力"
                  />
                </div>
              </div>

              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    卒業年月
                  </label>
                </div>
                <div className="w-[400px] flex items-center gap-2">
                  <div className="relative">
                    <select
                      value={education.graduation_year || ''}
                      onChange={(e) => setEducation({ ...education, graduation_year: parseInt(e.target.value) || null })}
                      className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      <option value="">未選択</option>
                      {Array.from({ length: 2025 - 1970 + 1 }, (_, i) => 2025 - i).map((year) => (
                        <option key={year} value={year}>
                          {year}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                  <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">年</span>
                  <div className="relative">
                    <select
                      value={education.graduation_month || ''}
                      onChange={(e) => setEducation({ ...education, graduation_month: parseInt(e.target.value) || null })}
                      className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      <option value="">未選択</option>
                      {Array.from({ length: 12 }, (_, i) => i + 1).map((month) => (
                        <option key={month} value={month}>
                          {month}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                  <span className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">月</span>
                </div>
              </div>

              {/* Industry Experience with Years */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    業種経験
                  </label>
                </div>
                <div className="w-[400px] space-y-4">
                  {workExperience.map((exp, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <input
                        type="text"
                        value={exp.industry_name}
                        onChange={(e) => {
                          const updated = [...workExperience];
                          updated[index] = { ...exp, industry_name: e.target.value };
                          setWorkExperience(updated);
                        }}
                        className="flex-1 px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                        placeholder="業種名"
                      />
                      <div className="relative">
                        <select
                          value={`${exp.experience_years}年`}
                          onChange={(e) => {
                            const updated = [...workExperience];
                            updated[index] = { ...exp, experience_years: parseInt(e.target.value.replace('年', '')) || 0 };
                            setWorkExperience(updated);
                          }}
                          className="px-[11px] py-[11px] pr-8 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                        >
                          {experienceYearOptions.map((option) => (
                            <option key={option} value={option}>
                              {option}
                            </option>
                          ))}
                        </select>
                        <div className="absolute right-2 top-1/2 -translate-y-1/2 pointer-events-none">
                          <svg xmlns="http://www.w3.org/2000/svg" width="10" height="6" viewBox="0 0 10 6" fill="none">
                            <path d="M4.07178 5.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H8.8376C9.79371 0 10.3395 1.00828 9.76583 1.71483L5.92822 5.90462C5.46411 6.47624 4.53589 6.47624 4.07178 5.90462Z" fill="#0F9058" />
                          </svg>
                        </div>
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          setWorkExperience(workExperience.filter((_, i) => i !== index));
                        }}
                        className="text-red-500 hover:text-red-700 text-[16px] font-bold tracking-[1.6px]"
                      >
                        削除
                      </button>
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={() => {
                      setWorkExperience([...workExperience, { industry_name: '', experience_years: 0 }]);
                    }}
                    className="text-green-600 hover:text-green-700 text-[16px] font-bold tracking-[1.6px]"
                  >
                    + 業種経験を追加
                  </button>
                </div>
              </div>

              {/* Job Type Experience with Years */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    職種経験
                  </label>
                </div>
                <div className="w-[400px] space-y-4">
                  {jobTypeExperience.map((exp, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <input
                        type="text"
                        value={exp.job_type_name}
                        onChange={(e) => {
                          const updated = [...jobTypeExperience];
                          updated[index] = { ...exp, job_type_name: e.target.value };
                          setJobTypeExperience(updated);
                        }}
                        className="flex-1 px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999]"
                        placeholder="職種名"
                      />
                      <div className="relative">
                        <select
                          value={`${exp.experience_years}年`}
                          onChange={(e) => {
                            const updated = [...jobTypeExperience];
                            updated[index] = { ...exp, experience_years: parseInt(e.target.value.replace('年', '')) || 0 };
                            setJobTypeExperience(updated);
                          }}
                          className="px-[11px] py-[11px] pr-8 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                        >
                          {experienceYearOptions.map((option) => (
                            <option key={option} value={option}>
                              {option}
                            </option>
                          ))}
                        </select>
                        <div className="absolute right-2 top-1/2 -translate-y-1/2 pointer-events-none">
                          <svg xmlns="http://www.w3.org/2000/svg" width="10" height="6" viewBox="0 0 10 6" fill="none">
                            <path d="M4.07178 5.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H8.8376C9.79371 0 10.3395 1.00828 9.76583 1.71483L5.92822 5.90462C5.46411 6.47624 4.53589 6.47624 4.07178 5.90462Z" fill="#0F9058" />
                          </svg>
                        </div>
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          setJobTypeExperience(jobTypeExperience.filter((_, i) => i !== index));
                        }}
                        className="text-red-500 hover:text-red-700 text-[16px] font-bold tracking-[1.6px]"
                      >
                        削除
                      </button>
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={() => {
                      setJobTypeExperience([...jobTypeExperience, { job_type_name: '', experience_years: 0 }]);
                    }}
                    className="text-green-600 hover:text-green-700 text-[16px] font-bold tracking-[1.6px]"
                  >
                    + 職種経験を追加
                  </button>
                </div>
              </div>
            </div>

            {/* Skills Section - matching skills signup page exactly */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              {/* English Level */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    英語レベル
                  </label>
                </div>
                <div className="w-[400px]">
                  <div className="relative">
                    <select
                      value={skills.english_level || ''}
                      onChange={(e) => setSkills({ ...skills, english_level: e.target.value })}
                      className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                    >
                      {ENGLISH_LEVELS.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                        <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              {/* Other Languages */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    その他言語
                  </label>
                </div>
                <div className="w-[400px] space-y-4">
                  {skills.other_languages.map((lang, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <div className="relative flex-1">
                        <select
                          value={lang.language}
                          onChange={(e) => handleLanguageChange(index, 'language', e.target.value)}
                          className="w-full px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                        >
                          {OTHER_LANGUAGES.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                            <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                          </svg>
                        </div>
                      </div>
                      <div className="relative">
                        <select
                          value={lang.level}
                          onChange={(e) => handleLanguageChange(index, 'level', e.target.value)}
                          className="px-[11px] py-[11px] pr-10 bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-bold tracking-[1.6px] appearance-none cursor-pointer"
                        >
                          {ENGLISH_LEVELS.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="10" viewBox="0 0 14 10" fill="none">
                            <path d="M6.07178 8.90462L0.234161 1.71483C-0.339509 1.00828 0.206262 0 1.16238 0H12.8376C13.7937 0 14.3395 1.00828 13.7658 1.71483L7.92822 8.90462C7.46411 9.47624 6.53589 9.47624 6.07178 8.90462Z" fill="#0F9058" />
                          </svg>
                        </div>
                      </div>
                      {skills.other_languages.length > 1 && (
                        <button
                          type="button"
                          onClick={() => handleRemoveLanguage(index)}
                          className="text-red-500 hover:text-red-700 text-[16px] font-bold tracking-[1.6px]"
                        >
                          削除
                        </button>
                      )}
                    </div>
                  ))}
                  {skills.other_languages.length < 5 && (
                    <button
                      type="button"
                      onClick={handleAddLanguage}
                      className="text-green-600 hover:text-green-700 text-[16px] font-bold tracking-[1.6px]"
                    >
                      + 言語を追加
                    </button>
                  )}
                </div>
              </div>

              {/* Skills */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    スキル
                  </label>
                </div>
                <div className="w-[400px]">
                  <textarea
                    value={skillInput}
                    onChange={(e) => setSkillInput(e.target.value)}
                    onKeyDown={handleSkillInputKeyDown}
                    rows={3}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999] resize-none"
                    placeholder="スキルを入力してEnterで追加"
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {skills.skills_list.map((skill, index) => (
                      <div key={index} className="bg-[#d2f1da] px-6 py-2 rounded-[10px] flex items-center gap-2">
                        <span className="text-[#0f9058] text-[14px] font-bold tracking-[1.4px]">
                          {skill}
                        </span>
                        <button
                          type="button"
                          onClick={() => handleRemoveSkill(skill)}
                        >
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <path d="M1 1L11 11M1 11L11 1" stroke="#0F9058" strokeWidth="1.5" strokeLinecap="round" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Qualifications */}
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    保有資格
                  </label>
                </div>
                <div className="w-[400px]">
                  <textarea
                    value={skills.qualifications || ''}
                    onChange={(e) => setSkills({ ...skills, qualifications: e.target.value })}
                    rows={3}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999] resize-none"
                    placeholder="保有資格を入力してください"
                  />
                </div>
              </div>
            </div>

            {/* Summary Section - matching summary signup page exactly */}
            <div className="flex flex-col gap-6 w-full items-end mb-8">
              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    職務要約
                  </label>
                </div>
                <div className="w-[400px]">
                  <textarea
                    value={formData.jobSummary}
                    onChange={(e) => handleInputChange('jobSummary', e.target.value)}
                    rows={5}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999] resize-none"
                    placeholder="職務要約を入力してください"
                  />
                </div>
              </div>

              <div className="flex flex-row gap-4 items-start w-fit mx-auto">
                <div className="pt-[11px] min-w-[130px] text-right">
                  <label className="text-[#323232] text-[16px] font-bold tracking-[1.6px]">
                    自己PR・その他
                  </label>
                </div>
                <div className="w-[400px]">
                  <textarea
                    value={formData.selfPr}
                    onChange={(e) => handleInputChange('selfPr', e.target.value)}
                    rows={5}
                    className="w-full px-[11px] py-[11px] bg-white border border-[#999999] rounded-[5px] text-[16px] text-[#323232] font-medium tracking-[1.6px] placeholder:text-[#999999] resize-none"
                    placeholder="自己PRやその他の情報を入力してください"
                  />
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex justify-center pt-8">
              <AdminButton 
                text={isSubmitting ? "準備中..." : "確認へ進む"} 
                variant="green-gradient" 
                size="figma-default"
                onClick={handleSubmit}
                disabled={isSubmitting}
              />
            </div>
          </form>
        </div>
      </div>

      {/* Modals */}
      {modalState.isOpen && modalState.targetType === 'industry' && (
        <IndustrySelectModal
          isOpen={true}
          onClose={() => setModalState({ isOpen: false, targetType: null, targetIndex: null })}
          onConfirm={handleIndustryConfirm}
          initialSelected={
            modalState.targetIndex !== null
              ? selectedIndustriesMap[modalState.targetIndex] || []
              : []
          }
        />
      )}

      {modalState.isOpen && modalState.targetType === 'jobtype' && (
        <JobTypeSelectModal
          isOpen={true}
          onClose={() => setModalState({ isOpen: false, targetType: null, targetIndex: null })}
          onConfirm={handleJobTypeConfirm}
          initialSelected={jobTypeExperience.map(exp => exp.job_type_name)}
        />
      )}
    </div>
  );
}